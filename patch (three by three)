module threebythree #(
    parameter DATA_WIDTH = 32,
    parameter PAD_WIDTH = 7,
    parameter PAD_HEIGHT = 7
)(
    input logic clk,
    input logic rst_n,
    input logic valid_padding,
    input logic [DATA_WIDTH-1:0] padded0 [0:PAD_HEIGHT-1][0:PAD_WIDTH-1],
    input logic [DATA_WIDTH-1:0] padded1 [0:PAD_HEIGHT-1][0:PAD_WIDTH-1],
    output logic [DATA_WIDTH-1:0] patch [0:2][0:2],
    output logic valid_patch
);

    // 내부 변수
    integer i, j;
    reg [2:0] row, col;
    reg patch_done;
    reg patch0_done;
    reg second_patch_done;
    reg valid0_padding;

    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            valid_patch <= 0;
            patch_done <= 0;
            patch0_done <= 0;
            second_patch_done <= 0;
            valid0_padding <= 0;
            row <= 0;
            col <= 0;
        end else if (valid_padding && !patch_done && !valid0_padding) begin
            if (row <= PAD_HEIGHT - 3 && col <= PAD_WIDTH - 3) begin
                // 3x3 패치 추출
                for (i = 0; i < 3; i = i + 1) begin
                    for (j = 0; j < 3; j = j + 1) begin
                        patch[i][j] <= padded0[row+i][col+j];
                    end
                end
                
                valid_patch <= 1;

                // 슬라이딩
                if (col < PAD_WIDTH - 3) begin
                    col <= col + 1;
                end else begin
                    col <= 0;
                    if (row < PAD_HEIGHT - 3) begin
                        row <= row + 1;
                    end else begin
                        row <= 0;
                        patch_done <= 1;
                        patch0_done <= 1;
                    end
                end
            end
        end else if (patch0_done && !second_patch_done) begin
            if (row <= PAD_HEIGHT - 3 && col <= PAD_WIDTH - 3) begin
                // 3x3 패치 추출
                for (i = 0; i < 3; i = i + 1) begin
                    for (j = 0; j < 3; j = j + 1) begin
                        patch[i][j] <= padded1[row+i][col+j];
                    end
                end
                valid_patch <= 1;

                // 슬라이딩
                if (col < PAD_WIDTH - 3) begin
                    col <= col + 1;
                end else begin
                    col <= 0;
                    if (row < PAD_HEIGHT - 3) begin
                        row <= row + 1;
                    end else begin
                        row <= 0;
                        second_patch_done <= 1; // 모든 패치가 완료됨
                        valid_patch <= 0; // 패치 완료 후 valid_patch를 비활성화
                    end
                end
            end
        end else if (second_patch_done) begin
            valid_patch <= 0;
        end
    end

endmodule
