module threebythree #(
    parameter DATA_WIDTH = 32,
    parameter PAD_WIDTH = 7,
    parameter PAD_HEIGHT = 7
)(
    input logic clk,
    input logic rst_n,
    input logic valid_padding,
    input logic [DATA_WIDTH-1:0] padded0 [0:PAD_HEIGHT-1][0:PAD_WIDTH-1],
    input logic [DATA_WIDTH-1:0] padded1 [0:PAD_HEIGHT-1][0:PAD_WIDTH-1],
    output logic [DATA_WIDTH-1:0] patch0 [0:2][0:2],
    output logic [DATA_WIDTH-1:0] patch1 [0:2][0:2],
    output logic valid_patch
);

    // 내부 변수
    integer i, j;
    reg [DATA_WIDTH-1:0] patch0_reg [0:2][0:2];
    reg [DATA_WIDTH-1:0] patch1_reg [0:2][0:2];
    reg [2:0] row, col;
    
    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            valid_patch <= 0;
            row <= 0;
            col <= 0;
        end else if (valid_padding) begin
            if (row <= PAD_HEIGHT - 3 && col <= PAD_WIDTH - 3) begin
                // 3x3 패치 추출
                for (i = 0; i < 3; i = i + 1) begin
                    for (j = 0; j < 3; j = j + 1) begin
                        patch0_reg[i][j] <= padded0[row+i][col+j];
                        patch1_reg[i][j] <= padded1[row+i][col+j];
                    end
                end
                valid_patch <= 1;

                // 슬라이딩
                if (col < PAD_WIDTH - 3) begin
                    col <= col + 1;
                end else begin
                    col <= 0;
                    if (row < PAD_HEIGHT - 3) begin
                        row <= row + 1;
                    end else begin
                        row <= 0;
                    end
                end
            end else begin
                valid_patch <= 0;
            end
        end
    end

    // 패치 출력
    assign patch0 = patch0_reg;
    assign patch1 = patch1_reg;

endmodule
